import com.github.gradle.node.npm.task.NpxTask

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.github.node-gradle.node' version '7.0.1'
}

group = 'com.hiddenartist'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

node {
    download = true
    version = '20.9.0'
    npmVersion = '10.8.2'
    nodeProjectDir = file("${projectDir}/src/main/resources/static")
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    configureEach {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // aop
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.session:spring-session-data-redis'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    // S3
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.1.1'

    // thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

    // database
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'com.h2database:h2'

    // queryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // logging
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.lmax:disruptor:3.4.4'

    // lang
    implementation 'org.apache.commons:commons-lang3:3.16.0'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // test container
    testImplementation "org.testcontainers:testcontainers:1.20.1"
    testImplementation "org.testcontainers:junit-jupiter:1.20.1"
    testImplementation "org.testcontainers:mysql:1.20.1"

}

/*QueryDSL Config*/
def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

sourceSets {
    main.java.srcDirs += [querydslDir]
}

clean.doLast {
    file(querydslDir).deleteDir()
}
/*QueryDSL Config*/

/*TailwindCss Config*/
def tailwindCss = tasks.register("tailwindcss", NpxTask) {
    command.set("tailwindcss")
    setArgs(["-i", "${projectDir}/src/main/resources/static/tailwinds.css", "-o", "${projectDir}/src/main/resources/static/css/tailwind-out.css"])
    dependsOn(tasks.npmInstall)
}

tasks.processResources {
    dependsOn(tailwindCss)
}
/*TailwindCss Config*/

tasks.named('test') {
    useJUnitPlatform()
    /* Exclude Compile Tailwind Css when Test */
    finalizedBy {
        gradle.taskGraph.whenReady {
            taskGraph ->
                if (taskGraph.hasTask(':test')) {
                    tasks.matching {
                        it.name in ['nodeSetup', 'npmSetup', 'npmInstall', 'tailwindcss', 'processResources']
                    }.configureEach {
                        enabled = false
                    }
                }
        }
    }
    /* Exclude Compile Tailwind Css when Test */
}
